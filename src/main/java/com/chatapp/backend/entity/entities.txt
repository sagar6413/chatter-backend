package com.chatapp.backend.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.Instant;

@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
@Getter
@Setter
public abstract class BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @CreatedDate
    @Column(name = "created_at", updatable = false, nullable = false)
    private Instant createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private Instant updatedAt;

    @Version
    @Column(nullable = false)
    private Long version;

    @Column(name = "is_deleted", nullable = false)
    private boolean deleted = false;


    @PreUpdate
    public void preUpdate() {
        if (deleted && updatedAt == null) {
            this.updatedAt = Instant.now();
        }
    }

}package com.chatapp.backend.entity;

import com.chatapp.backend.entity.enums.ConversationType;
import com.chatapp.backend.entity.enums.GroupRole;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.CreationTimestamp;

import java.io.Serializable;
import java.time.Instant;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "conversations",
        indexes = {
                @Index(name = "idx_conversation_type", columnList = "type"),
                @Index(name = "idx_conversation_created", columnList = "created_at")
        }
)
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Conversation extends BaseEntity {

    @Enumerated(EnumType.STRING)
    @Column(nullable = false, length = 20)
    private ConversationType type;

    // Optimize fetching of participants
    @ManyToMany
    @JoinTable(
            name = "conversation_participants",
            joinColumns = @JoinColumn(name = "conversation_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id"),
            indexes = {
                    @Index(name = "idx_conv_part_user", columnList = "user_id"),
                    @Index(name = "idx_conv_part_conv", columnList = "conversation_id")
            }
    )
    @BatchSize(size = 30)
    @Builder.Default
    private Set<User> participants = new HashSet<>();

    // Add participant count for quick access
    @Column(name = "participant_count")
    private int participantCount;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "last_message_id")
    private Message lastMessage;

    // Use @OneToOne with lazy loading and cascade
    @OneToOne(mappedBy = "conversation",
            cascade = CascadeType.ALL
    )
    private GroupSettings groupSettings;

    // Add helper methods for managing participants
    public void addParticipant(User user) {
        participants.add(user);
        user.getConversations().add(this);
    }

    public void removeParticipant(User user) {
        participants.remove(user);
        user.getConversations().remove(this);
    }

    public void updateParticipantCount() {
        this.participantCount = this.participants.size();
    }

    @PrePersist
    @PreUpdate
    private void validateParticipants() {
        if (type == ConversationType.PRIVATE && participants.size() > 2) {
            throw new IllegalStateException("Direct conversations can only have 2 participants");
        }
    }
}


package com.chatapp.backend.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;

@Entity
@Table(name = "group_settings")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class GroupSettings extends BaseEntity {
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "conversation_id", nullable = false)
    private Conversation conversation;

    @Column(name = "name", nullable = false, length = 100)
    private String name;

    @Column(length = 500)
    private String description;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "creator_id", nullable = false)
    private User creator;

    @Builder.Default
    @Column(name = "only_admins_can_send")
    private boolean onlyAdminsCanSend = false;

    @Column(name = "message_retention_days")
    private Integer messageRetentionDays;

    @Column(name = "max_members")
    private Integer maxMembers = 256;

    @Column(name = "is_public")
    private boolean isPublic = false;
}
package com.chatapp.backend.entity;

import com.chatapp.backend.entity.enums.MediaType;
import com.chatapp.backend.entity.enums.MediaUploadStatus;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;

@Entity
@Table(name = "media",
        indexes = {
                @Index(name = "idx_media_message", columnList = "message_id"),
                @Index(name = "idx_media_type", columnList = "file_type")
        }
)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Media extends BaseEntity{

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "message_id", nullable = false)
    private Message message;

    @Column(name = "file_name", nullable = false)
    private String fileName;

    @Column(name = "file_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private MediaType fileType;


    @Column(name = "file_size", nullable = false)
    private Long fileSize;

    @Column(name = "upload_url", nullable = false)
    private String uploadUrl;

    @CreationTimestamp
    @Column(name = "uploaded_at", updatable = false)
    private Instant uploadedAt;
    // Store metadata separately for quick access
    @Column(name = "metadata", columnDefinition = "jsonb")
    private String metadata;

    // Add status tracking for upload progress
    @Enumerated(EnumType.STRING)
    @Column(name = "upload_status")
    private MediaUploadStatus uploadStatus = MediaUploadStatus.PENDING;

    @Column(name = "checksum")
    private String checksum;
}

package com.chatapp.backend.entity;

import com.chatapp.backend.entity.enums.MessageDeliveryState;
import jakarta.persistence.*;
import lombok.*;

import java.time.Instant;

@Entity
@Table(name = "message_delivery_status",
        uniqueConstraints = {
                @UniqueConstraint(
                        columnNames = {"message_id", "recipient_id"},
                        name = "uk_message_recipient"
                )
        },
        indexes = {
                @Index(name = "idx_mds_message_status", columnList = "message_id,status"),
                @Index(name = "idx_mds_recipient_status", columnList = "recipient_id,status")
        }
)
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class MessageDeliveryStatus extends BaseEntity {

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "message_id", nullable = false)
    private Message message;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "recipient_id", nullable = false)
    private User recipient;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private MessageDeliveryState status;

    @Column(name = "status_timestamp", nullable = false)
    private Instant statusTimestamp;

    // Add helper methods for state transitions
    public void markAsReceived() {
        if (this.status.ordinal() < MessageDeliveryState.RECEIVED.ordinal()) {
            this.status = MessageDeliveryState.RECEIVED;
            this.statusTimestamp = Instant.now();
        }
    }

    public void markAsDelivered() {
        if (this.status.ordinal() < MessageDeliveryState.DELIVERED.ordinal()) {
            this.status = MessageDeliveryState.DELIVERED;
            this.statusTimestamp = Instant.now();
        }
    }

    public void markAsRead() {
        if (this.status.ordinal() < MessageDeliveryState.READ.ordinal()) {
            this.status = MessageDeliveryState.READ;
            this.statusTimestamp = Instant.now();
        }
    }
}

package com.chatapp.backend.entity;

import com.chatapp.backend.entity.enums.MessageDeliveryState;
import com.chatapp.backend.entity.enums.MessageStatus;
import com.chatapp.backend.entity.enums.MessageType;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "messages",
        indexes = {
                @Index(name = "idx_message_conversation", columnList = "conversation_id, created_at"),
                @Index(name = "idx_message_sender", columnList = "sender_id"),
                @Index(name = "idx_message_status", columnList = "status")
        }
)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Message extends BaseEntity{
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "conversation_id", nullable = false)
    private Conversation conversation;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "sender_id", nullable = false)
    private User sender;

    @Column(length = 4000)
    private String content;

    @Column(name = "edited_at")
    private Instant editedAt;

    @OneToMany(mappedBy = "message", cascade = CascadeType.ALL, orphanRemoval = true)
    @BatchSize(size = 20)
    @Builder.Default
    private Set<Media> mediaItems = new HashSet<>();

    @Enumerated(EnumType.STRING)
    @Column(name = "message_type", nullable = false, length = 20)
    private MessageType type;

    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false, length = 20)
    private MessageStatus status;

    @OneToMany(mappedBy = "message", cascade = CascadeType.ALL)
    @BatchSize(size = 50)
    @Builder.Default
    private Set<MessageDeliveryStatus> deliveryStatuses = new HashSet<>();

    @OneToMany(mappedBy = "message", cascade = CascadeType.ALL)
    @BatchSize(size = 30)
    @Builder.Default
    private Set<Reaction> reactions = new HashSet<>();

    @PrePersist
    protected void onCreate() {
        if (status == null)
            status = MessageStatus.NOT_SENT;

        if (type == null)
            type = MessageType.TEXT;

    }

    // Add helper methods for managing relationships
    public void addMediaItem(Media mediaItem) {
        mediaItems.add(mediaItem);
        mediaItem.setMessage(this);
    }
    public void removeMediaItem(Media mediaItem) {
        mediaItems.remove(mediaItem);
        mediaItem.setMessage(null);
    }
    public void addReaction(Reaction reaction) {
        reactions.add(reaction);
        reaction.setMessage(this);
    }
    public void removeReaction(Reaction reaction) {
        reactions.remove(reaction);
        reaction.setMessage(null);
    }
    public void editContent(String newContent) {
        this.content = newContent;
        this.editedAt = Instant.now();
    }
    public void updateMessageStatus(MessageStatus newStatus) {
        this.status = newStatus;
    }

    public void initializeDeliveryStatus(Set<User> recipients) {
        recipients.forEach(recipient -> {
            if (!this.sender.equals(recipient)) {
                MessageDeliveryStatus status = MessageDeliveryStatus.builder()
                                                                    .message(this)
                                                                    .recipient(recipient)
                                                                    .status(MessageDeliveryState.SENT)
                                                                    .sentAt(Instant.now())
                                                                    .build();
                this.deliveryStatuses.add(status);
            }
        });
    }

    // Get count of recipients who have read the message
    public long getReadCount() {
        return deliveryStatuses.stream()
                               .filter(status -> status.getStatus() == MessageDeliveryState.READ)
                               .count();
    }

    // Get recipients who haven't read the message yet
    public Set<User> getUnreadRecipients() {
        return deliveryStatuses.stream()
                               .filter(status -> status.getStatus() != MessageDeliveryState.READ)
                               .map(MessageDeliveryStatus::getRecipient)
                               .collect(Collectors.toSet());
    }

    // Check if all recipients have read the message
    public boolean isReadByAll() {
        return deliveryStatuses.stream()
                               .allMatch(status -> status.getStatus() == MessageDeliveryState.READ);
    }
}package com.chatapp.backend.entity;

import com.chatapp.backend.entity.enums.ReactionType;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;

@Entity
@Table(name = "reactions", indexes = {
        @Index(name = "idx_reaction_message_id", columnList = "message_id"),
        @Index(name = "idx_reaction_user_id", columnList = "user_id")
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Reaction extends BaseEntity {

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "message_id", nullable = false)
    private Message message;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Enumerated(EnumType.STRING)
    @Column(name = "reaction_type", length = 20)
    private ReactionType type;

}package com.chatapp.backend.entity;

import com.chatapp.backend.entity.enums.UserStatus;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.Instant;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "users",
        indexes = {
                @Index(name = "idx_user_username", columnList = "username", unique = true),
                @Index(name = "idx_user_last_active", columnList = "last_active_at")
        }
)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User extends BaseEntity {
    @Column(name = "username", unique = true, nullable = false, length = 50)
    private String username;

    @Column(name = "display_name", nullable = false, length = 100)
    private String displayName;

    @Column(name = "password", nullable = false)
    private String password; // Consider using a more secure field for password storage

    @Enumerated(EnumType.STRING)
    @Column(name = "status", length = 20, nullable = false)
    @Builder.Default
    private UserStatus status = UserStatus.OFFLINE;

    @Column(name = "last_seen_at")
    private Instant lastSeenAt;

    @OneToMany(mappedBy = "sender")
    @BatchSize(size = 20)
    @Builder.Default
    private Set<Message> sentMessages = new HashSet<>();

    @ManyToMany(mappedBy = "participants")
    @BatchSize(size = 20)
    @Builder.Default
    private Set<Conversation> conversations = new HashSet<>();

    @Embedded
    @AttributeOverrides({
            @AttributeOverride(name = "theme",
                    column = @Column(name = "ui_theme")),
            @AttributeOverride(name = "notificationEnabled",
                    column = @Column(name = "notifications_enabled"))
    })
    private UserPreferences preferences = new UserPreferences();

}

package com.chatapp.backend.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;

@Embeddable
public class UserPreferences {
    @Column(name = "notification_enabled")
    private boolean notificationEnabled = true;

    @Column(name = "theme")
    private String theme = "light";

    // Add more user preferences as needed
    
}
