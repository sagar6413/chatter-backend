package com.chatapp.backend.dto.request;

import lombok.Builder;
import java.util.Set;

import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Size;

@Builder
public record CreateGroupRequest (
    @NotEmpty(message = "Participant IDs are required")
    @Size(min = 1, max = 256, message = "Number of participants must be between 1 and 256")
    Set<Long> participantIds,
    GroupSettingsRequest groupSettings
) {    
}
package com.chatapp.backend.dto.request;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Builder;

@Builder
public record GroupSettingsRequest( 
@NotBlank(message = "Group name is required")
@Size(min = 3, max = 100, message = "Group name must be between 3 and 100 characters")
String name,

@Size(max = 500, message = "Description cannot exceed 500 characters")
String description,

boolean onlyAdminsCanSend,

@Min(value = 1, message = "Message retention days must be at least 1")
@Max(value = 365, message = "Message retention days cannot exceed 365")
Integer messageRetentionDays,

@Min(value = 2, message = "Maximum members must be at least 2")
@Max(value = 256, message = "Maximum members cannot exceed 256")
Integer maxMembers,

boolean isPublic) {
}
package com.chatapp.backend.dto.request;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Builder;

@Builder
public record MediaUploadRequest(
    @NotBlank(message = "File name is required")
    String fileName,

    @NotNull(message = "File size is required")
    @Min(value = 1, message = "File size must be greater than 0")
    @Max(value = 104857600, message = "File size cannot exceed 100MB") // 100MB limit
    Long fileSize,

    @NotBlank(message = "File type is required")
    String fileType,

    @Pattern(regexp = "^[a-fA-F0-9]{32}$", message = "Invalid checksum format")
    String checksum
) {
    
}
package com.chatapp.backend.dto.request;

import lombok.Builder;

@Builder
public record MessageRequest(
    
) {}
package com.chatapp.backend.dto.request;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.Builder;

@Builder
public record SignInDTO(@NotBlank(message = "Username is required")
@Pattern(regexp = "^[a-zA-Z0-9_]{3,50}$", message = "Username must be alphanumeric and between 3-50 characters")
String username, @NotBlank(message = "Password is required")
@Pattern(
        regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$",
        message = "Password must be at least 8 characters long and contain at least one digit, " +
                "one uppercase letter, one lowercase letter, and one special character"
)
String password) {
}
package com.chatapp.backend.dto.request;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Builder;

@Builder
public record SignUpDTO(@NotBlank(message = "Username is required")
@Pattern(regexp = "^[a-zA-Z0-9_]{3,50}$", message = "Username must be alphanumeric and between 3-50 characters")
String username, @NotBlank(message = "Display name is required")
@Size(min = 2, max = 100, message = "Display name must be between 2 and 100 characters")
String displayName, @NotBlank(message = "Password is required")
@Pattern(
        regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$",
        message = "Password must be at least 8 characters long and contain at least one digit, " +
                "one uppercase letter, one lowercase letter, and one special character"
)
String password) {
}
package com.chatapp.backend.dto.request;

import jakarta.validation.constraints.Pattern;
import lombok.Builder;

@Builder
public record UserPreferenceRequest(
     boolean notificationEnabled,

    @Pattern(regexp = "^(light|dark)$", message = "Theme must be either 'light' or 'dark'")
     String theme){
}
